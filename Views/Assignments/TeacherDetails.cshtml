@model CodeGrade.Models.Assignment
@{
    ViewData["Title"] = "Детайли на задача";
}

<div class="bg-white shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-bold text-gray-900">@Model.Title</h2>
                <p class="text-gray-600 mt-1">@Model.SubjectModule?.Name</p>
            </div>
            <div class="flex space-x-2">
                <a href="/Assignments/Edit/@Model.Id" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors">
                    <i class="fas fa-edit mr-2"></i>Редактирай
                </a>
                <a href="/Assignments" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>Назад
                </a>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Main Content -->
            <div class="lg:col-span-2 space-y-6">
                <!-- Assignment Info -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Информация за задачата</h3>
                    <div class="grid grid-cols-2 gap-4 text-sm">
                        <div>
                            <span class="font-medium text-gray-700">Краен срок:</span>
                            <span class="text-gray-600">@Model.DueDate.ToString("dd.MM.yyyy HH:mm")</span>
                        </div>
                        <div>
                            <span class="font-medium text-gray-700">Максимални точки:</span>
                            <span class="text-gray-600">@Model.MaxPoints</span>
                        </div>
                        <div>
                            <span class="font-medium text-gray-700">Времеви лимит:</span>
                            <span class="text-gray-600">@Model.TimeLimit сек</span>
                        </div>
                        <div>
                            <span class="font-medium text-gray-700">Лимит на паметта:</span>
                            <span class="text-gray-600">@Model.MemoryLimit MB</span>
                        </div>
                        <div>
                            <span class="font-medium text-gray-700">Клас:</span>
                            <span class="text-gray-600">@(Model.ClassGroup?.Name ?? "-")</span>
                        </div>
                        <div>
                            <span class="font-medium text-gray-700">Език:</span>
                            <span class="text-gray-600">@GetLanguageDisplay(Model.Language)</span>
                        </div>
                        <div>
                            <span class="font-medium text-gray-700">Статус:</span>
                            @if (Model.IsActive)
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    Активна
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    Неактивна
                                </span>
                            }
                        </div>
                        <div>
                            <span class="font-medium text-gray-700">Създадена:</span>
                            <span class="text-gray-600">@Model.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                        </div>
                    </div>
                </div>

                <!-- Description -->
                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">Описание</h3>
                        <p class="text-gray-600 whitespace-pre-wrap">@Model.Description</p>
                    </div>
                }

                <!-- Problem Statement -->
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Условие на задачата</h3>
                    <div class="bg-gray-50 rounded-lg p-4">
                        <pre class="whitespace-pre-wrap text-gray-700">@Model.ProblemStatement</pre>
                    </div>
                </div>

                <!-- Test Cases -->
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Тестови случаи (@Model.TestCases.Count)</h3>
                    <div class="space-y-4">
                        @foreach (var testCase in Model.TestCases.OrderBy(tc => tc.Id))
                        {
                            <div class="border border-gray-200 rounded-lg p-4 @(testCase.IsHidden ? "bg-yellow-50" : "bg-white")">
                                <div class="flex justify-between items-center mb-3">
                                    <h4 class="font-medium text-gray-900">
                                        Тест @(Model.TestCases.OrderBy(tc => tc.Id).ToList().IndexOf(testCase) + 1)
                                        <span class="text-sm text-gray-500">(@testCase.Points точки)</span>
                                    </h4>
                                    @if (testCase.IsHidden)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                            <i class="fas fa-eye-slash mr-1"></i>Скрит
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            <i class="fas fa-eye mr-1"></i>Публичен
                                        </span>
                                    }
                                </div>
                                
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Вход:</label>
                                        <pre class="bg-gray-100 rounded p-2 text-sm text-gray-700 overflow-x-auto">@testCase.Input</pre>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Очакван изход:</label>
                                        <pre class="bg-gray-100 rounded p-2 text-sm text-gray-700 overflow-x-auto">@testCase.ExpectedOutput</pre>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- Statistics -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Статистики</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Общо решения:</span>
                            <span class="text-sm font-medium text-gray-900">@Model.Submissions.Count</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Тестови случаи:</span>
                            <span class="text-sm font-medium text-gray-900">@Model.TestCases.Count</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Публични тестове:</span>
                            <span class="text-sm font-medium text-gray-900">@Model.TestCases.Count(tc => !tc.IsHidden)</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Скрити тестове:</span>
                            <span class="text-sm font-medium text-gray-900">@Model.TestCases.Count(tc => tc.IsHidden)</span>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Действия</h3>
                    <div class="space-y-2">
                        <a href="/Assignments/Edit/@Model.Id" class="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors flex items-center justify-center">
                            <i class="fas fa-edit mr-2"></i>Редактирай
                        </a>
                        <a href="/Submissions?assignmentId=@Model.Id" class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors flex items-center justify-center">
                            <i class="fas fa-file-code mr-2"></i>Виж решения
                        </a>
                        <a href="/Grades?assignmentId=@Model.Id" class="w-full bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center">
                            <i class="fas fa-chart-bar mr-2"></i>Виж оценки
                        </a>
                        @if (Model.IsActive)
                        {
                            <button onclick="toggleAssignmentStatus(@Model.Id, false)" class="w-full bg-yellow-600 text-white px-4 py-2 rounded-md hover:bg-yellow-700 transition-colors flex items-center justify-center">
                                <i class="fas fa-pause mr-2"></i>Деактивирай
                            </button>
                        }
                        else
                        {
                            <button onclick="toggleAssignmentStatus(@Model.Id, true)" class="w-full bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center">
                                <i class="fas fa-play mr-2"></i>Активирай
                            </button>
                        }
                    </div>
                </div>

                <!-- Time Info -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Времеви рамки</h3>
                    <div class="space-y-2 text-sm">
                        @{
                            var timeRemaining = Model.DueDate - DateTime.UtcNow;
                            var isOverdue = timeRemaining.TotalSeconds <= 0;
                        }
                        
                        @if (isOverdue)
                        {
                            <div class="text-red-600">
                                <i class="fas fa-exclamation-triangle mr-1"></i>
                                Срокът е изтекъл преди @Math.Abs(timeRemaining.Days) дни
                            </div>
                        }
                        else
                        {
                            <div class="text-green-600">
                                <i class="fas fa-clock mr-1"></i>
                                Остават @timeRemaining.Days дни, @timeRemaining.Hours часа
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleAssignmentStatus(assignmentId, isActive) {
            const action = isActive ? 'активирате' : 'деактивирате';
            showConfirmModal(
                'Промяна на статус',
                `Сигурни ли сте, че искате да ${action} тази задача?`,
                () => {
                    // This would need to be implemented as a separate action
                    fetch('/Assignments/ToggleStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ id: assignmentId, isActive: isActive })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            showNotification('Грешка при промяна на статуса', 'error');
                        }
                    });
                }
            );
        }

        // Enhanced confirmation modal system
        function showConfirmModal(title, message, onConfirm) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
            modal.innerHTML = `
                <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                    <div class="mt-3 text-center">
                        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100">
                            <i class="fas fa-question-circle text-blue-600 text-xl"></i>
                        </div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">${title}</h3>
                        <div class="mt-2 px-7 py-3">
                            <p class="text-sm text-gray-500">${message}</p>
                        </div>
                        <div class="items-center px-4 py-3 flex space-x-3">
                            <button id="confirm-yes" class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md flex-1 shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                Да
                            </button>
                            <button id="confirm-no" class="px-4 py-2 bg-gray-300 text-gray-700 text-base font-medium rounded-md flex-1 shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300">
                                Не
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Event listeners
            modal.querySelector('#confirm-yes').addEventListener('click', () => {
                modal.remove();
                onConfirm();
            });
            
            modal.querySelector('#confirm-no').addEventListener('click', () => {
                modal.remove();
            });
            
            // Close modal when clicking outside
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                }
            });
        }

        // Enhanced notification system
        function showNotification(message, type = 'info', duration = 5000) {
            const notification = document.createElement('div');
            const iconClass = type === 'success' ? 'fas fa-check-circle text-green-600' :
                            type === 'error' ? 'fas fa-exclamation-triangle text-red-600' :
                            type === 'warning' ? 'fas fa-exclamation-triangle text-yellow-600' :
                            'fas fa-info-circle text-blue-600';
            
            const bgClass = type === 'success' ? 'bg-green-50 border-green-200 text-green-800' :
                           type === 'error' ? 'bg-red-50 border-red-200 text-red-800' :
                           type === 'warning' ? 'bg-yellow-50 border-yellow-200 text-yellow-800' :
                           'bg-blue-50 border-blue-200 text-blue-800';
            
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 border ${bgClass} max-w-sm`;
            notification.innerHTML = `
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <i class="${iconClass} mr-3 text-lg"></i>
                        <span class="font-medium">${message}</span>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-4 opacity-70 hover:opacity-100 transition-opacity">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Auto-remove after duration
            if (duration > 0) {
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, duration);
            }
        }
    </script>
}

@functions {
    private string GetLanguageDisplay(string code)
    {
        return code switch
        {
            "csharp" => "C# (.NET Core)",
            "python" => "Python 3.8.1",
            "java" => "Java (OpenJDK 13)",
            "javascript" => "JavaScript (Node.js)",
            "cpp" => "C++ (GCC 9.2.0)",
            "php" => "PHP 7.4.1",
            "ruby" => "Ruby 2.7.0",
            "go" => "Go 1.13.5",
            "rust" => "Rust 1.40.0",
            _ => code
        };
    }
}