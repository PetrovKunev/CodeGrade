@model CodeGrade.ViewModels.AssignmentDetailsViewModel
@{
    ViewData["Title"] = "Детайли на задача";
}

<div class="bg-white shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                @if (Model.Assignment != null)
                {
                    <h2 class="text-2xl font-bold text-gray-900">@Model.Assignment.Title</h2>
                    <p class="text-sm text-indigo-700 font-semibold mt-1">
                        @GetLanguageDisplay(Model.Assignment.Language)
                    </p>
                    <p class="text-gray-600 mt-1">@Model.Assignment.SubjectModule?.Name</p>
                }
            </div>
            <div class="flex items-center space-x-4">
                <div class="text-right">
                    <div class="text-sm text-gray-600">Краен срок:</div>
                    @if (Model.Assignment != null)
                    {
                        <div class="font-medium @(((Model.Assignment?.DueDate ?? DateTime.MinValue) > DateTime.UtcNow ? "text-green-600" : "text-red-600"))">
                            @(Model.Assignment != null ? Model.Assignment.DueDate.ToString("dd.MM.yyyy HH:mm") : "-")
                        </div>
                    }
                    <div class="text-xs text-gray-500">@Model.TimeRemaining</div>
                </div>
                <a href="/Assignments" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>Назад
                </a>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Main Content -->
            <div class="lg:col-span-2 space-y-6">
                <!-- Assignment Info -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Информация за задачата</h3>
                    <div class="grid grid-cols-2 gap-4 text-sm">
                        @if (Model.Assignment != null)
                        {
                            <div>
                                <span class="font-medium text-gray-700">Максимални точки:</span>
                                <span class="text-gray-600">@Model.Assignment.MaxPoints</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">Времеви лимит:</span>
                                <span class="text-gray-600">@Model.Assignment.TimeLimit сек</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">Лимит на паметта:</span>
                                <span class="text-gray-600">@Model.Assignment.MemoryLimit MB</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">Публични тестове:</span>
                                <span class="text-gray-600">@Model.PublicTestCases.Count</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">Клас:</span>
                                <span class="text-gray-600">@(Model.Assignment.ClassGroup?.Name ?? "-")</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">Език:</span>
                                <span class="text-gray-600">@GetLanguageDisplay(Model.Assignment.Language)</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Description -->
                @if (Model.Assignment != null && !string.IsNullOrEmpty(Model.Assignment.Description))
                {
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">Описание</h3>
                        <p class="text-gray-600 whitespace-pre-wrap">@Model.Assignment.Description</p>
                    </div>
                }

                <!-- Problem Statement -->
                @if (Model.Assignment != null)
                {
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">Условие на задачата</h3>
                        <div class="bg-gray-50 rounded-lg p-4">
                            <pre class="whitespace-pre-wrap text-gray-700">@Model.Assignment.ProblemStatement</pre>
                        </div>
                    </div>
                }

                <!-- Public Test Cases -->
                @if (Model.PublicTestCases.Any())
                {
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">Примерни тестови случаи</h3>
                        <div class="space-y-4">
                            @foreach (var testCase in Model.PublicTestCases.OrderBy(tc => tc.Id))
                            {
                                <div class="border border-gray-200 rounded-lg p-4 bg-white">
                                    <div class="flex justify-between items-center mb-3">
                                        <h4 class="font-medium text-gray-900">
                                            Тест @(Model.PublicTestCases.OrderBy(tc => tc.Id).ToList().IndexOf(testCase) + 1)
                                            <span class="text-sm text-gray-500">(@testCase.Points точки)</span>
                                        </h4>
                                    </div>
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Вход:</label>
                                            <pre class="bg-gray-100 rounded p-2 text-sm text-gray-700 overflow-x-auto">@testCase.Input</pre>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Очакван изход:</label>
                                            <pre class="bg-gray-100 rounded p-2 text-sm text-gray-700 overflow-x-auto">@testCase.ExpectedOutput</pre>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Submission Form -->
                @if (Model.CanSubmit)
                {
                    <div>
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="text-lg font-medium text-gray-900">Подай решение</h3>
                            @if (Model.Assignment != null)
                            {
                                <a asp-action="Submit" asp-route-id="@(Model.Assignment?.Id ?? 0)" target="_blank" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors">
                                    <i class="fas fa-external-link-alt mr-2"></i>Отвори в нов прозорец
                                </a>
                            }
                        </div>
                        @if (Model.Assignment != null)
                        {
                            <form asp-action="Submit" asp-route-id="@(Model.Assignment?.Id ?? 0)" method="post" class="space-y-4" id="submission-form">
                            <input name="AssignmentId" value="@(Model.Assignment?.Id ?? 0)" type="hidden" />
                            <div asp-validation-summary="ModelOnly" class="text-red-600"></div>

                            <div>
                                <label for="language-select" class="block text-sm font-medium text-gray-700">Език на програмиране</label>
                                <select name="Language" id="language-select" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                    <option value="csharp" selected="@(Model.SubmissionForm.Language == "csharp")">C#</option>
                                    <option value="python" selected="@(Model.SubmissionForm.Language == "python")">Python</option>
                                    <option value="java" selected="@(Model.SubmissionForm.Language == "java")">Java</option>
                                    <option value="javascript" selected="@(Model.SubmissionForm.Language == "javascript")">JavaScript</option>
                                </select>
                                <!-- Debug info -->
                                <div style="display: none;">
                                    <p>Debug: Selected Language = @Model.SubmissionForm.Language</p>
                                </div>
                            </div>

                            <div>
                                <div class="flex justify-between items-center mb-1">
                                    <label for="code-editor" class="block text-sm font-medium text-gray-700">Код на решението</label>
                                    <div class="flex space-x-2 text-xs">
                                        <button type="button" id="test-code-btn" class="text-blue-600 hover:text-blue-800">
                                            <i class="fas fa-play mr-1"></i>Тествай с примерите
                                        </button>
                                        <button type="button" id="format-code-btn" class="text-gray-600 hover:text-gray-800">
                                            <i class="fas fa-indent mr-1"></i>Форматирай
                                        </button>
                                    </div>
                                </div>
                                <textarea name="Code" id="code-editor" rows="15" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm font-mono" placeholder="Въведете вашия код тук..." spellcheck="false">@Model.SubmissionForm.Code</textarea>
                                <div class="flex justify-between items-center mt-1 text-xs text-gray-500">
                                    <span id="char-count">0 символа</span>
                                    <span id="line-count">1 ред</span>
                                </div>
                                <!-- Debug info -->
                                <div style="display: none;">
                                    <p>Debug: Model Code = @Model.SubmissionForm.Code</p>
                                    <p>Debug: Model Code Length = @(Model.SubmissionForm.Code?.Length ?? 0)</p>
                                    <p>Debug: Model Language = @Model.SubmissionForm.Language</p>
                                </div>
                            </div>

                            <!-- Test Results Area -->
                            <div id="test-results-area" class="hidden">
                                <h4 class="text-sm font-medium text-gray-900 mb-2">Резултати от тестване:</h4>
                                <div id="test-results-content" class="bg-gray-50 border rounded p-3">
                                    <!-- Test results will be populated here -->
                                </div>
                            </div>

                            <!-- Submission Status -->
                            <div id="submission-status" class="hidden">
                                <div class="bg-blue-50 border border-blue-200 rounded p-3">
                                    <div class="flex items-center">
                                        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                                        <span class="text-blue-800">Обработва се решението...</span>
                                    </div>
                                </div>
                            </div>

                            <div class="flex justify-between items-center">
                                <div class="text-sm text-gray-500">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    @if (Model.Assignment != null)
                                    {
                                        <span>Максимално време: @Model.Assignment.TimeLimit сек | Памет: @Model.Assignment.MemoryLimit MB</span>
                                    }
                                </div>
                                <button type="submit" id="submit-btn" class="bg-indigo-600 text-white px-6 py-2 rounded-md hover:bg-indigo-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                    <i class="fas fa-paper-plane mr-2"></i>Подай решение
                                </button>
                            </div>
                        </form>
                        }
                    </div>
                }
                else
                {
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                        <div class="flex items-center">
                            <i class="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                            <span class="text-red-800">Срокът за подаване на решения е изтекъл.</span>
                        </div>
                    </div>
                }
            </div>

            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- My Submissions -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Моите решения</h3>
                    @if (Model.StudentSubmissions.Any())
                    {
                        <div class="space-y-3" id="submissions-container">
                            @foreach (var submission in Model.StudentSubmissions.Take(3))
                            {
                                @await Html.PartialAsync("_SubmissionStatusPartial", submission)
                            }
                        </div>
                        
                        @if (Model.StudentSubmissions.Count > 3)
                        {
                            <div class="mt-4 pt-3 border-t border-gray-200 text-center">
                                @if (Model.Assignment != null)
                                {
                                    <a href="/Submissions/MySubmissions?assignmentId=@Model.Assignment.Id" class="text-sm text-indigo-600 hover:text-indigo-800">
                                        <i class="fas fa-list mr-1"></i>Виж всички решения (@Model.StudentSubmissions.Count)
                                    </a>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-6">
                            <i class="fas fa-file-code text-gray-400 text-3xl mb-3"></i>
                            <p class="text-sm text-gray-500">Още няма подадени решения</p>
                            <p class="text-xs text-gray-400 mt-1">Подайте първото си решение по-долу</p>
                        </div>
                    }
                </div>

                <!-- Assignment Stats -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Статистики</h3>
                    <div class="space-y-2">
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Моите решения:</span>
                            <span class="text-sm font-medium text-gray-900">@Model.StudentSubmissions.Count</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Публични тестове:</span>
                            <span class="text-sm font-medium text-gray-900">@Model.PublicTestCases.Count</span>
                        </div>
                        @if (Model.Assignment != null)
                        {
                            <div class="flex justify-between">
                                <span class="text-sm text-gray-600">Общо точки:</span>
                                <span class="text-sm font-medium text-gray-900">@Model.Assignment.MaxPoints</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Tips -->
                <div class="bg-blue-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-blue-900 mb-3">
                        <i class="fas fa-lightbulb mr-2"></i>Съвети
                    </h3>
                    <ul class="text-sm text-blue-800 space-y-1">
                        <li>• Тествайте кода си с примерните входове</li>
                        <li>• Внимавайте с форматирането на изхода</li>
                        <li>• Проверете времевите и паметови ограничения</li>
                        <li>• Можете да подавате решения многократно</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const codeEditor = document.getElementById('code-editor');
            const charCount = document.getElementById('char-count');
            const lineCount = document.getElementById('line-count');
            const testCodeBtn = document.getElementById('test-code-btn');
            const formatCodeBtn = document.getElementById('format-code-btn');
            const submissionForm = document.getElementById('submission-form');
            const submitBtn = document.getElementById('submit-btn');
            const submissionStatus = document.getElementById('submission-status');
            const testResultsArea = document.getElementById('test-results-area');
            const testResultsContent = document.getElementById('test-results-content');
            
            console.log('DOM loaded, elements found:');
            console.log('codeEditor:', codeEditor);
            console.log('charCount:', charCount);
            console.log('lineCount:', lineCount);
            console.log('submissionForm:', submissionForm);
            
            // Code editor enhancements
            if (codeEditor) {
                console.log('Code editor found, initial value:', codeEditor.value);
                console.log('Code editor length:', codeEditor.value.length);
                
                // Update character and line count
                function updateCounts() {
                    const value = codeEditor.value;
                    const chars = value.length;
                    const lines = value.split('\n').length;
                    
                    console.log('Updating counts - chars:', chars, 'lines:', lines);
                    console.log('Editor value:', value);
                    
                    if (charCount) {
                        charCount.textContent = chars + ' символа';
                        console.log('Updated char count element:', charCount.textContent);
                    }
                    if (lineCount) {
                        lineCount.textContent = lines + ' ред' + (lines !== 1 ? 'а' : '');
                        console.log('Updated line count element:', lineCount.textContent);
                    }
                }
                
                codeEditor.addEventListener('input', updateCounts);
                codeEditor.addEventListener('keydown', function(e) {
                    // Auto-indent on Enter
                    if (e.key === 'Enter') {
                        const cursorPos = this.selectionStart;
                        const textBeforeCursor = this.value.substring(0, cursorPos);
                        const lastLine = textBeforeCursor.split('\n').pop();
                        const indentMatch = lastLine.match(/^\s*/);
                        const indent = indentMatch ? indentMatch[0] : '';
                        
                        // Add extra indent for certain characters
                        if (lastLine.trim().endsWith('{') || lastLine.trim().endsWith(':')) {
                            setTimeout(() => {
                                const newCursorPos = this.selectionStart;
                                const spaces = '    '; // 4 spaces
                                this.value = this.value.substring(0, newCursorPos) + indent + spaces + this.value.substring(newCursorPos);
                                this.selectionStart = this.selectionEnd = newCursorPos + indent.length + spaces.length;
                                updateCounts();
                            }, 0);
                        } else {
                            setTimeout(() => {
                                const newCursorPos = this.selectionStart;
                                this.value = this.value.substring(0, newCursorPos) + indent + this.value.substring(newCursorPos);
                                this.selectionStart = this.selectionEnd = newCursorPos + indent.length;
                                updateCounts();
                            }, 0);
                        }
                    }
                    
                    // Tab support
                    if (e.key === 'Tab') {
                        e.preventDefault();
                        const start = this.selectionStart;
                        const end = this.selectionEnd;
                        this.value = this.value.substring(0, start) + '    ' + this.value.substring(end);
                        this.selectionStart = this.selectionEnd = start + 4;
                        updateCounts();
                    }
                });
                
                // Auto-save functionality
                let autoSaveTimeout;
                codeEditor.addEventListener('input', function() {
                    clearTimeout(autoSaveTimeout);
                    autoSaveTimeout = setTimeout(() => {
                        const formData = {
                            assignmentId: @(Model.Assignment?.Id ?? 0),
                            code: this.value,
                            language: document.getElementById('language-select').value
                        };
                        localStorage.setItem('draft-assignment-@(Model.Assignment?.Id ?? 0)', JSON.stringify(formData));
                    }, 2000);
                });
                
                // Load draft on page load
                const draftKey = 'draft-assignment-@(Model.Assignment?.Id ?? 0)';
                const savedDraft = localStorage.getItem(draftKey);
                console.log('Checking for saved draft:', draftKey);
                console.log('Saved draft found:', savedDraft);
                
                if (savedDraft) {
                    try {
                        const draft = JSON.parse(savedDraft);
                        console.log('Parsed draft:', draft);
                        console.log('Current editor value:', codeEditor.value);
                        console.log('Draft code:', draft.code);
                        
                        if (draft.code && !codeEditor.value) {
                            console.log('Loading draft code into editor');
                            codeEditor.value = draft.code;
                            if (draft.language) {
                                document.getElementById('language-select').value = draft.language;
                            }
                            showNotification('Заредена е запазена чернова', 'info', 3000);
                        } else {
                            console.log('Not loading draft - conditions not met');
                        }
                    } catch (e) {
                        console.error('Error loading draft:', e);
                    }
                } else {
                    console.log('No saved draft found');
                }
                
                // Initialize counts after loading draft
                console.log('Initializing counts, editor value:', codeEditor.value);
                console.log('Editor placeholder:', codeEditor.placeholder);
                console.log('Editor rows:', codeEditor.rows);
                console.log('Editor class:', codeEditor.className);
                console.log('Editor innerHTML:', codeEditor.innerHTML);
                console.log('Editor textContent:', codeEditor.textContent);
                console.log('Editor defaultValue:', codeEditor.defaultValue);
                updateCounts();
            }
            
            // Format code functionality
            if (formatCodeBtn) {
                formatCodeBtn.addEventListener('click', function() {
                    const language = document.getElementById('language-select').value;
                    const code = codeEditor.value;
                    
                    // Basic formatting (in a real app, use proper formatters)
                    let formatted = code
                        .split('\n')
                        .map(line => line.trim())
                        .join('\n')
                        .replace(/\{/g, ' {\n')
                        .replace(/\}/g, '\n}')
                        .replace(/;/g, ';\n')
                        .split('\n')
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                        .join('\n');
                    
                    codeEditor.value = formatted;
                    updateCounts();
                    showNotification('Кодът е форматиран', 'info');
                });
            }
            
            // Test code with sample inputs
            if (testCodeBtn) {
                testCodeBtn.addEventListener('click', async function() {
                    const code = codeEditor.value.trim();
                    const language = document.getElementById('language-select').value;
                    
                    if (!code) {
                        showNotification('Въведете код за тестване', 'error');
                        return;
                    }
                    
                    this.disabled = true;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Тества...';
                    
                    try {
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                        const response = await fetch('/Assignments/TestCode', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                ...(token && { 'RequestVerificationToken': token })
                            },
                            body: JSON.stringify({
                                code: code,
                                language: language,
                                assignmentId: @(Model.Assignment?.Id ?? 0)
                            })
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            displayTestResults(result.results);
                        } else {
                            showNotification(result.error || 'Грешка при тестването', 'error');
                        }
                        
                    } catch (error) {
                        showNotification('Грешка при тестването: ' + error.message, 'error');
                    } finally {
                        this.disabled = false;
                        this.innerHTML = '<i class="fas fa-play mr-1"></i>Тествай с примерите';
                    }
                });
            }
            
            // Enhanced form submission
            if (submissionForm) {
                submissionForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const code = codeEditor.value.trim();
                    if (!code) {
                        showNotification('Въведете код за подаване', 'error');
                        return;
                    }
                    
                    if (code.length > 50000) {
                        showNotification('Кодът е твърде дълъг (максимум 50,000 символа)', 'error');
                        return;
                    }
                    
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Подава се...';
                    submissionStatus.classList.remove('hidden');
                    
                    // Create FormData and submit via AJAX
                    const formData = new FormData(submissionForm);
                    
                    // Ensure AssignmentId is properly set
                    if (!formData.get('AssignmentId')) {
                        formData.set('AssignmentId', @(Model.Assignment?.Id ?? 0));
                    }
                    
                    fetch(submissionForm.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showNotification(data.message, 'success');
                            // Clear draft after successful submission
                            localStorage.removeItem('draft-assignment-@(Model.Assignment?.Id ?? 0)');
                            // Reload page to show updated submissions
                            setTimeout(() => {
                                location.reload();
                            }, 2000);
                        } else {
                            if (data.showModal) {
                                // Show modal for limit reached
                                const modal = document.createElement('div');
                                modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
                                modal.innerHTML = `
                                    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                                        <div class="mt-3 text-center">
                                            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                                                <i class="fas fa-exclamation-triangle text-yellow-600 text-xl"></i>
                                            </div>
                                            <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">Достигнат лимит</h3>
                                            <div class="mt-2 px-7 py-3">
                                                                                <p class="text-sm text-gray-500">
                                    Достигнат е лимитът от 3 решения за тази задача. Можете да прегледате всички решения в секцията "Моите решения" или да се свържете с учителя за допълнителни опити.
                                </p>
                                            </div>
                                            <div class="items-center px-4 py-3">
                                                <button onclick="this.parentElement.parentElement.parentElement.parentElement.remove()" class="px-4 py-2 bg-indigo-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-300">
                                                    Разбрах
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                `;
                                document.body.appendChild(modal);
                                
                                // Close modal when clicking outside
                                modal.addEventListener('click', function(e) {
                                    if (e.target === modal) {
                                        modal.remove();
                                    }
                                });
                            } else {
                                showNotification(data.message, 'error');
                            }
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Подай решение';
                            submissionStatus.classList.add('hidden');
                        }
                    })
                    .catch(error => {
                        console.error('Submission error:', error);
                        showNotification('Възникна грешка при подаването на решението. Моля, опитайте отново.', 'error');
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Подай решение';
                        submissionStatus.classList.add('hidden');
                    });
                });
            }
            
            // Display test results
            function displayTestResults(results) {
                if (!results || !results.length) {
                    testResultsContent.innerHTML = '<p class="text-gray-500">Няма резултати</p>';
                    testResultsArea.classList.remove('hidden');
                    return;
                }
                
                let html = '<div class="space-y-2">';
                
                results.forEach((result, index) => {
                    const statusClass = result.success ? 'text-green-600' : 'text-red-600';
                    const statusIcon = result.success ? 'fas fa-check-circle' : 'fas fa-times-circle';
                    
                    html += `
                        <div class="border rounded p-2 ${result.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}">
                            <div class="flex items-center justify-between mb-1">
                                <span class="text-sm font-medium">
                                    <i class="${statusIcon} ${statusClass} mr-1"></i>
                                    Тест ${index + 1}
                                </span>
                                <span class="text-xs ${statusClass}">${result.success ? '✓' : '✗'}</span>
                            </div>
                    `;
                    
                    if (!result.success) {
                        html += `
                            <div class="text-xs space-y-1">
                                <div><strong>Вход:</strong> ${result.input || 'Няма'}</div>
                                <div><strong>Очакван:</strong> ${result.expectedOutput || 'Няма'}</div>
                                <div><strong>Получен:</strong> ${result.actualOutput || 'Няма'}</div>
                                <div><strong>Статус:</strong> ${result.status || 'Неизвестен'}</div>
                                ${result.errorMessage ? `<div><strong>Грешка:</strong> ${result.errorMessage}</div>` : ''}
                            </div>
                        `;
                    }
                    
                    html += '</div>';
                });
                
                html += '</div>';
                testResultsContent.innerHTML = html;
                testResultsArea.classList.remove('hidden');
            }
            
            // Enhanced notification system
            function showNotification(message, type = 'info', duration = 5000) {
                const notification = document.createElement('div');
                const iconClass = type === 'success' ? 'fas fa-check-circle text-green-600' :
                                type === 'error' ? 'fas fa-exclamation-triangle text-red-600' :
                                type === 'warning' ? 'fas fa-exclamation-triangle text-yellow-600' :
                                'fas fa-info-circle text-blue-600';
                
                const bgClass = type === 'success' ? 'bg-green-50 border-green-200 text-green-800' :
                               type === 'error' ? 'bg-red-50 border-red-200 text-red-800' :
                               type === 'warning' ? 'bg-yellow-50 border-yellow-200 text-yellow-800' :
                               'bg-blue-50 border-blue-200 text-blue-800';
                
                notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 border ${bgClass} max-w-sm`;
                notification.innerHTML = `
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <i class="${iconClass} mr-3 text-lg"></i>
                            <span class="font-medium">${message}</span>
                        </div>
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 opacity-70 hover:opacity-100 transition-opacity">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                document.body.appendChild(notification);
                
                // Auto-remove after duration
                if (duration > 0) {
                    setTimeout(() => {
                        if (notification.parentElement) {
                            notification.remove();
                        }
                    }, duration);
                }
            }
        });
    </script>
}

@functions {
    private string GetLanguageDisplay(string code)
    {
        return code switch
        {
            "csharp" => "C# (.NET Core)",
            "python" => "Python 3.8.1",
            "java" => "Java (OpenJDK 13)",
            "javascript" => "JavaScript (Node.js)",
            "cpp" => "C++ (GCC 9.2.0)",
            "php" => "PHP 7.4.1",
            "ruby" => "Ruby 2.7.0",
            "go" => "Go 1.13.5",
            "rust" => "Rust 1.40.0",
            _ => code
        };
    }
}