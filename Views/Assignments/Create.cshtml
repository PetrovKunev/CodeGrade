@model CodeGrade.ViewModels.AssignmentViewModel
@{
    ViewData["Title"] = "Създай задача";
}

<div class="bg-white shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
        <div class="mb-6">
            <h2 class="text-2xl font-bold text-gray-900">Създай нова задача</h2>
            <p class="text-gray-600 mt-1">Създайте задача с тестови случаи за вашите ученици</p>
        </div>

        <form asp-action="Create" method="post" id="assignment-form">
            <div asp-validation-summary="ModelOnly" class="text-red-600 mb-4"></div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Left Column -->
                <div class="space-y-6">
                    <div>
                        <label asp-for="Title" class="block text-sm font-medium text-gray-700"></label>
                        <input asp-for="Title" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        <span asp-validation-for="Title" class="text-red-600 text-sm"></span>
                    </div>

                    <div>
                        <label asp-for="Description" class="block text-sm font-medium text-gray-700"></label>
                        <textarea asp-for="Description" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                        <span asp-validation-for="Description" class="text-red-600 text-sm"></span>
                    </div>

                    <div>
                        <label asp-for="SubjectModuleId" class="block text-sm font-medium text-gray-700"></label>
                        <select asp-for="SubjectModuleId" asp-items="@(new SelectList(Model.AvailableModules, "Id", "Name"))" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            <option value="">Изберете модул</option>
                        </select>
                        <span asp-validation-for="SubjectModuleId" class="text-red-600 text-sm"></span>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label asp-for="DueDate" class="block text-sm font-medium text-gray-700"></label>
                            <input asp-for="DueDate" type="datetime-local" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                            <span asp-validation-for="DueDate" class="text-red-600 text-sm"></span>
                        </div>

                        <div>
                            <label asp-for="MaxPoints" class="block text-sm font-medium text-gray-700"></label>
                            <input asp-for="MaxPoints" type="number" min="1" max="100" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                            <span asp-validation-for="MaxPoints" class="text-red-600 text-sm"></span>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label asp-for="TimeLimit" class="block text-sm font-medium text-gray-700"></label>
                            <input asp-for="TimeLimit" type="number" min="1" max="300" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                            <span asp-validation-for="TimeLimit" class="text-red-600 text-sm"></span>
                        </div>

                        <div>
                            <label asp-for="MemoryLimit" class="block text-sm font-medium text-gray-700"></label>
                            <input asp-for="MemoryLimit" type="number" min="1" max="1024" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                            <span asp-validation-for="MemoryLimit" class="text-red-600 text-sm"></span>
                        </div>
                    </div>

                    <div class="flex items-center">
                        <input asp-for="IsActive" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" />
                        <label asp-for="IsActive" class="ml-2 block text-sm text-gray-900"></label>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="space-y-6">
                    <div>
                        <label asp-for="ProblemStatement" class="block text-sm font-medium text-gray-700"></label>
                        <textarea asp-for="ProblemStatement" rows="12" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Опишете условието на задачата..."></textarea>
                        <span asp-validation-for="ProblemStatement" class="text-red-600 text-sm"></span>
                    </div>
                </div>
            </div>

            <!-- Test Cases Section -->
            <div class="mt-8">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Тестови случаи</h3>
                    <div class="flex space-x-2">
                        <button type="button" id="import-test-cases" class="bg-blue-600 text-white px-3 py-1 rounded-md hover:bg-blue-700 transition-colors text-sm">
                            <i class="fas fa-file-import mr-1"></i>Импорт
                        </button>
                        <button type="button" id="clear-all-tests" class="bg-red-600 text-white px-3 py-1 rounded-md hover:bg-red-700 transition-colors text-sm">
                            <i class="fas fa-trash mr-1"></i>Изчисти всички
                        </button>
                        <button type="button" id="add-test-case" class="bg-green-600 text-white px-3 py-1 rounded-md hover:bg-green-700 transition-colors text-sm">
                            <i class="fas fa-plus mr-1"></i>Добави тест
                        </button>
                    </div>
                </div>
                
                <!-- Import Modal -->
                <div id="import-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
                    <div class="flex items-center justify-center min-h-screen">
                        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Импорт на тестови случаи</h3>
                            <p class="text-sm text-gray-600 mb-4">Въведете тестовите случаи в следния формат:<br>
                            <code>input1|output1|points1|hidden(true/false)</code></p>
                            <textarea id="import-text" rows="10" class="w-full border border-gray-300 rounded-md p-2 text-sm" placeholder="1 2|3|10|false
5 10|15|10|true"></textarea>
                            <div class="flex justify-end space-x-3 mt-4">
                                <button type="button" id="cancel-import" class="px-4 py-2 text-gray-600 hover:text-gray-800">Отмени</button>
                                <button type="button" id="confirm-import" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">Импорт</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="test-cases-container" class="space-y-4">
                    @for (int i = 0; i < Model.TestCases.Count; i++)
                    {
                        <div class="test-case border border-gray-200 rounded-lg p-4 bg-gray-50">
                            <div class="flex justify-between items-center mb-3">
                                <h4 class="font-medium text-gray-900">Тест @(i + 1)</h4>
                                <button type="button" class="remove-test-case text-red-600 hover:text-red-800">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Вход</label>
                                    <textarea asp-for="TestCases[i].Input" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Очакван изход</label>
                                    <textarea asp-for="TestCases[i].ExpectedOutput" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                                </div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Точки</label>
                                    <input asp-for="TestCases[i].Points" type="number" min="0" max="100" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                                </div>
                                <div class="flex items-center mt-6">
                                    <input asp-for="TestCases[i].IsHidden" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" />
                                    <label class="ml-2 block text-sm text-gray-900">Скрит тест</label>
                                </div>
                                <div class="flex items-center mt-6 space-x-2">
                                    <button type="button" class="duplicate-test-case text-blue-600 hover:text-blue-800 text-sm" title="Дублирай тест">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                    <button type="button" class="test-case-validation text-green-600 hover:text-green-800 text-sm" title="Валидирай тест">
                                        <i class="fas fa-check-circle"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-8 flex justify-end space-x-4">
                <a href="/Assignments" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors">
                    Отмени
                </a>
                <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors">
                    <i class="fas fa-save mr-2"></i>Създай задача
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        let testCaseIndex = @Model.TestCases.Count;
        
        // Add new test case
        document.getElementById('add-test-case').addEventListener('click', function() {
            addTestCase();
        });

        function addTestCase(input = '', output = '', points = 1, isHidden = false) {
            const container = document.getElementById('test-cases-container');
            const testCaseHtml = `
                <div class="test-case border border-gray-200 rounded-lg p-4 bg-gray-50">
                    <div class="flex justify-between items-center mb-3">
                        <h4 class="font-medium text-gray-900">Тест ${testCaseIndex + 1}</h4>
                        <button type="button" class="remove-test-case text-red-600 hover:text-red-800">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Вход</label>
                            <textarea name="TestCases[${testCaseIndex}].Input" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${input}</textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Очакван изход</label>
                            <textarea name="TestCases[${testCaseIndex}].ExpectedOutput" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${output}</textarea>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Точки</label>
                            <input name="TestCases[${testCaseIndex}].Points" type="number" min="0" max="100" value="${points}" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        </div>
                        <div class="flex items-center mt-6">
                            <input name="TestCases[${testCaseIndex}].IsHidden" type="checkbox" value="true" ${isHidden ? 'checked' : ''} class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" />
                            <input name="TestCases[${testCaseIndex}].IsHidden" type="hidden" value="false" />
                            <label class="ml-2 block text-sm text-gray-900">Скрит тест</label>
                        </div>
                        <div class="flex items-center mt-6 space-x-2">
                            <button type="button" class="duplicate-test-case text-blue-600 hover:text-blue-800 text-sm" title="Дублирай тест">
                                <i class="fas fa-copy"></i>
                            </button>
                            <button type="button" class="test-case-validation text-green-600 hover:text-green-800 text-sm" title="Валидирай тест">
                                <i class="fas fa-check-circle"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', testCaseHtml);
            testCaseIndex++;
            updateTestCaseNumbers();
        }

        function updateTestCaseNumbers() {
            const testCases = document.querySelectorAll('.test-case');
            testCases.forEach((testCase, index) => {
                const header = testCase.querySelector('h4');
                header.textContent = `Тест ${index + 1}`;
            });
        }

        // Event delegation for dynamic buttons
        document.addEventListener('click', function(e) {
            // Remove test case
            if (e.target.classList.contains('remove-test-case') || e.target.parentElement.classList.contains('remove-test-case')) {
                const testCase = e.target.closest('.test-case');
                testCase.remove();
                updateTestCaseNumbers();
            }
            
            // Duplicate test case
            if (e.target.classList.contains('duplicate-test-case') || e.target.parentElement.classList.contains('duplicate-test-case')) {
                const testCase = e.target.closest('.test-case');
                const input = testCase.querySelector('textarea[name$=".Input"]').value;
                const output = testCase.querySelector('textarea[name$=".ExpectedOutput"]').value;
                const points = testCase.querySelector('input[name$=".Points"]').value;
                const isHidden = testCase.querySelector('input[name$=".IsHidden"][type="checkbox"]').checked;
                
                addTestCase(input, output, points, isHidden);
            }
            
            // Validate test case
            if (e.target.classList.contains('test-case-validation') || e.target.parentElement.classList.contains('test-case-validation')) {
                validateTestCase(e.target.closest('.test-case'));
            }
        });

        function validateTestCase(testCaseElement) {
            const input = testCaseElement.querySelector('textarea[name$=".Input"]');
            const output = testCaseElement.querySelector('textarea[name$=".ExpectedOutput"]');
            const points = testCaseElement.querySelector('input[name$=".Points"]');
            
            // Reset validation styles
            [input, output, points].forEach(el => {
                el.classList.remove('border-red-500', 'border-green-500');
            });
            
            let isValid = true;
            
            if (!input.value.trim()) {
                input.classList.add('border-red-500');
                isValid = false;
            } else {
                input.classList.add('border-green-500');
            }
            
            if (!output.value.trim()) {
                output.classList.add('border-red-500');
                isValid = false;
            } else {
                output.classList.add('border-green-500');
            }
            
            if (!points.value || points.value < 0 || points.value > 100) {
                points.classList.add('border-red-500');
                isValid = false;
            } else {
                points.classList.add('border-green-500');
            }
            
            // Show validation message
            const icon = testCaseElement.querySelector('.test-case-validation i');
            if (isValid) {
                icon.className = 'fas fa-check-circle';
                icon.parentElement.className = 'test-case-validation text-green-600 hover:text-green-800 text-sm';
            } else {
                icon.className = 'fas fa-exclamation-circle';
                icon.parentElement.className = 'test-case-validation text-red-600 hover:text-red-800 text-sm';
            }
        }

        // Import functionality
        document.getElementById('import-test-cases').addEventListener('click', function() {
            document.getElementById('import-modal').classList.remove('hidden');
        });

        document.getElementById('cancel-import').addEventListener('click', function() {
            document.getElementById('import-modal').classList.add('hidden');
            document.getElementById('import-text').value = '';
        });

        document.getElementById('confirm-import').addEventListener('click', function() {
            const importText = document.getElementById('import-text').value.trim();
            if (!importText) return;
            
            const lines = importText.split('\n');
            let importedCount = 0;
            
            lines.forEach(line => {
                const parts = line.split('|');
                if (parts.length >= 2) {
                    const input = parts[0].trim();
                    const output = parts[1].trim();
                    const points = parts[2] ? parseInt(parts[2].trim()) : 1;
                    const isHidden = parts[3] ? parts[3].trim().toLowerCase() === 'true' : false;
                    
                    addTestCase(input, output, points, isHidden);
                    importedCount++;
                }
            });
            
            document.getElementById('import-modal').classList.add('hidden');
            document.getElementById('import-text').value = '';
            
            if (importedCount > 0) {
                showNotification(`Импортирани са ${importedCount} тестови случая!`, 'success');
            }
        });

        // Clear all tests
        document.getElementById('clear-all-tests').addEventListener('click', function() {
            if (confirm('Сигурни ли сте, че искате да изтриете всички тестови случаи?')) {
                document.getElementById('test-cases-container').innerHTML = '';
                testCaseIndex = 0;
                showNotification('Всички тестови случаи са изтрити!', 'info');
            }
        });

        // Auto-save functionality
        let autoSaveTimeout;
        document.getElementById('assignment-form').addEventListener('input', function() {
            clearTimeout(autoSaveTimeout);
            autoSaveTimeout = setTimeout(() => {
                saveFormDraft();
            }, 2000);
        });

        function saveFormDraft() {
            const formData = new FormData(document.getElementById('assignment-form'));
            const draftData = {};
            
            for (let [key, value] of formData.entries()) {
                draftData[key] = value;
            }
            
            localStorage.setItem('assignment-draft', JSON.stringify(draftData));
            showNotification('Чернова е запазена автоматично', 'info', 2000);
        }

        function loadFormDraft() {
            const draftData = localStorage.getItem('assignment-draft');
            if (draftData) {
                const data = JSON.parse(draftData);
                
                Object.keys(data).forEach(key => {
                    const element = document.querySelector(`[name="${key}"]`);
                    if (element) {
                        if (element.type === 'checkbox') {
                            element.checked = data[key] === 'true';
                        } else {
                            element.value = data[key];
                        }
                    }
                });
                
                showNotification('Заредена е запазена чернова', 'info', 3000);
            }
        }

        function showNotification(message, type = 'info', duration = 5000) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-md shadow-lg z-50 ${
                type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
                type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
                'bg-blue-100 text-blue-800 border border-blue-200'
            }`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, duration);
        }

        // Load draft on page load
        window.addEventListener('load', function() {
            loadFormDraft();
        });

        // Clear draft on successful submit
        document.getElementById('assignment-form').addEventListener('submit', function() {
            localStorage.removeItem('assignment-draft');
        });
    </script>
    
    @await Html.PartialAsync("_ValidationScriptsPartial")
}