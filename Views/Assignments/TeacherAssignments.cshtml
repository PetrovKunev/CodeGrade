@model List<CodeGrade.Models.Assignment>
@{
    ViewData["Title"] = "Задачи - Учител";
}

<div class="bg-white shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-900">Моите задачи</h2>
            <div class="flex space-x-3">
                <button id="bulk-actions-btn" class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors" style="display: none;">
                    <i class="fas fa-cogs mr-2"></i>Действия
                </button>
                <a href="/Assignments/Create" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors">
                    <i class="fas fa-plus mr-2"></i>Нова задача
                </a>
            </div>
        </div>
        
        <!-- Filters and Search -->
        <div class="bg-gray-50 p-4 rounded-lg mb-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Търси</label>
                    <input type="text" id="search-input" placeholder="Търси по заглавие..." class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Модул</label>
                    <select id="module-filter" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                        <option value="">Всички модули</option>
                        @foreach (var module in ViewBag.Modules ?? new List<dynamic>())
                        {
                            <option value="@module.Name">@module.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Статус</label>
                    <select id="status-filter" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                        <option value="">Всички</option>
                        <option value="active">Активни</option>
                        <option value="inactive">Неактивни</option>
                        <option value="expired">Изтекли</option>
                    </select>
                </div>
                <div class="flex items-end">
                    <button id="clear-filters" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors text-sm">
                        <i class="fas fa-times mr-1"></i>Изчисти
                    </button>
                </div>
            </div>
        </div>

        @if (Model.Any())
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <input type="checkbox" id="select-all" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" onclick="sortTable('title')">
                                Заглавие <i class="fas fa-sort ml-1"></i>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" onclick="sortTable('module')">
                                Модул <i class="fas fa-sort ml-1"></i>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" onclick="sortTable('dueDate')">
                                Краен срок <i class="fas fa-sort ml-1"></i>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" onclick="sortTable('status')">
                                Статус <i class="fas fa-sort ml-1"></i>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var assignment in Model)
                        {
                            <tr class="assignment-row" data-title="@assignment.Title.ToLower()" data-module="@(assignment.SubjectModule?.Name ?? "")" data-status="@(assignment.IsActive ? "active" : "inactive")" data-due-date="@assignment.DueDate.ToString("yyyy-MM-dd")">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <input type="checkbox" class="assignment-checkbox h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" data-assignment-id="@assignment.Id">
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    @assignment.Title
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @assignment.SubjectModule?.Name
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @assignment.DueDate.ToString("dd.MM.yyyy HH:mm")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (assignment.IsActive)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            Активна
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                            Неактивна
                                        </span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <a href="/Assignments/Details/@assignment.Id" class="text-blue-600 hover:text-blue-900 mr-3" title="Виж детайли">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/Assignments/Edit/@assignment.Id" class="text-indigo-600 hover:text-indigo-900 mr-3" title="Редактирай">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a href="/Assignments/Delete/@assignment.Id" class="text-red-600 hover:text-red-900" title="Изтрий">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <i class="fas fa-tasks text-gray-400 text-4xl mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Няма създадени задачи</h3>
                <p class="text-gray-500 mb-6">Създайте първата си задача, за да започнете да работите.</p>
                <a href="/Assignments/Create" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors">
                    <i class="fas fa-plus mr-2"></i>Създай задача
                </a>
            </div>
        }
    </div>
</div>

<!-- Bulk Actions Modal -->
<div id="bulk-actions-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen">
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Избрани действия</h3>
            <div class="space-y-3">
                <button class="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700" onclick="bulkAction('activate')">
                    <i class="fas fa-check mr-2"></i>Активирай избраните
                </button>
                <button class="w-full bg-yellow-600 text-white px-4 py-2 rounded-md hover:bg-yellow-700" onclick="bulkAction('deactivate')">
                    <i class="fas fa-pause mr-2"></i>Деактивирай избраните
                </button>
                <button class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700" onclick="bulkAction('duplicate')">
                    <i class="fas fa-copy mr-2"></i>Дублирай избраните
                </button>
                <button class="w-full bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700" onclick="bulkAction('delete')">
                    <i class="fas fa-trash mr-2"></i>Изтрий избраните
                </button>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
                <button onclick="closeBulkModal()" class="px-4 py-2 text-gray-600 hover:text-gray-800">Затвори</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Assignment management functionality
    let sortDirection = {};
    
    // Search and filter functionality
    document.getElementById('search-input').addEventListener('input', filterAssignments);
    document.getElementById('module-filter').addEventListener('change', filterAssignments);
    document.getElementById('status-filter').addEventListener('change', filterAssignments);
    document.getElementById('clear-filters').addEventListener('click', clearFilters);
    
    function filterAssignments() {
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        const moduleFilter = document.getElementById('module-filter').value;
        const statusFilter = document.getElementById('status-filter').value;
        
        const rows = document.querySelectorAll('.assignment-row');
        let visibleCount = 0;
        
        rows.forEach(row => {
            const title = row.dataset.title;
            const module = row.dataset.module;
            const status = row.dataset.status;
            const dueDate = new Date(row.dataset.dueDate);
            const now = new Date();
            
            let show = true;
            
            // Search filter
            if (searchTerm && !title.includes(searchTerm)) {
                show = false;
            }
            
            // Module filter
            if (moduleFilter && module !== moduleFilter) {
                show = false;
            }
            
            // Status filter
            if (statusFilter) {
                if (statusFilter === 'active' && status !== 'active') show = false;
                if (statusFilter === 'inactive' && status !== 'inactive') show = false;
                if (statusFilter === 'expired' && (status !== 'active' || dueDate > now)) show = false;
            }
            
            row.style.display = show ? '' : 'none';
            if (show) visibleCount++;
        });
        
        // Show/hide empty state
        const table = document.querySelector('table');
        if (table && visibleCount === 0) {
            if (!document.querySelector('.no-results')) {
                const noResults = document.createElement('div');
                noResults.className = 'text-center py-12 no-results';
                noResults.innerHTML = '<i class="fas fa-search text-gray-400 text-4xl mb-4"></i><h3 class="text-lg font-medium text-gray-900 mb-2">Няма намерени резултати</h3><p class="text-gray-500">Опитайте с различни филтри.</p>';
                table.parentNode.appendChild(noResults);
            }
        } else {
            const noResults = document.querySelector('.no-results');
            if (noResults) noResults.remove();
        }
    }
    
    function clearFilters() {
        document.getElementById('search-input').value = '';
        document.getElementById('module-filter').value = '';
        document.getElementById('status-filter').value = '';
        filterAssignments();
    }
    
    // Sorting functionality
    function sortTable(column) {
        const table = document.querySelector('table tbody');
        const rows = Array.from(table.querySelectorAll('.assignment-row'));
        
        if (!sortDirection[column]) sortDirection[column] = 'asc';
        else sortDirection[column] = sortDirection[column] === 'asc' ? 'desc' : 'asc';
        
        rows.sort((a, b) => {
            let aVal, bVal;
            
            switch(column) {
                case 'title':
                    aVal = a.dataset.title;
                    bVal = b.dataset.title;
                    break;
                case 'module':
                    aVal = a.dataset.module;
                    bVal = b.dataset.module;
                    break;
                case 'dueDate':
                    aVal = new Date(a.dataset.dueDate);
                    bVal = new Date(b.dataset.dueDate);
                    break;
                case 'status':
                    aVal = a.dataset.status;
                    bVal = b.dataset.status;
                    break;
            }
            
            if (aVal < bVal) return sortDirection[column] === 'asc' ? -1 : 1;
            if (aVal > bVal) return sortDirection[column] === 'asc' ? 1 : -1;
            return 0;
        });
        
        // Clear and re-append sorted rows
        rows.forEach(row => table.appendChild(row));
        
        // Update sort icons
        document.querySelectorAll('th i.fas').forEach(icon => {
            icon.className = 'fas fa-sort ml-1';
        });
        
        const header = document.querySelector(`th[onclick="sortTable('${column}')"] i`);
        if (header) {
            header.className = `fas fa-sort-${sortDirection[column] === 'asc' ? 'up' : 'down'} ml-1`;
        }
    }
    
    // Bulk selection functionality
    document.getElementById('select-all').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.assignment-checkbox');
        checkboxes.forEach(cb => {
            if (cb.closest('.assignment-row').style.display !== 'none') {
                cb.checked = this.checked;
            }
        });
        updateBulkActionsButton();
    });
    
    document.addEventListener('change', function(e) {
        if (e.target.classList.contains('assignment-checkbox')) {
            updateBulkActionsButton();
        }
    });
    
    function updateBulkActionsButton() {
        const selectedCount = document.querySelectorAll('.assignment-checkbox:checked').length;
        const bulkButton = document.getElementById('bulk-actions-btn');
        
        if (selectedCount > 0) {
            bulkButton.style.display = 'block';
            bulkButton.innerHTML = `<i class="fas fa-cogs mr-2"></i>Действия (${selectedCount})`;
        } else {
            bulkButton.style.display = 'none';
        }
    }
    
    document.getElementById('bulk-actions-btn').addEventListener('click', function() {
        document.getElementById('bulk-actions-modal').classList.remove('hidden');
    });
    
    function closeBulkModal() {
        document.getElementById('bulk-actions-modal').classList.add('hidden');
    }
    
    function bulkAction(action) {
        const selectedIds = Array.from(document.querySelectorAll('.assignment-checkbox:checked'))
            .map(cb => cb.dataset.assignmentId);
        
        if (selectedIds.length === 0) return;
        
        let confirmMessage = '';
        switch(action) {
            case 'activate':
                confirmMessage = `Активирай ${selectedIds.length} задачи?`;
                break;
            case 'deactivate':
                confirmMessage = `Деактивирай ${selectedIds.length} задачи?`;
                break;
            case 'duplicate':
                confirmMessage = `Дублирай ${selectedIds.length} задачи?`;
                break;
            case 'delete':
                confirmMessage = `Изтрий ${selectedIds.length} задачи? Това действие е необратимо!`;
                break;
        }
        
        showConfirmModal(
            'Масово действие',
            confirmMessage,
            () => {
                // Here you would make AJAX calls to the server
                // For now, we'll just show a notification
                showNotification(`Извършено е ${action} действие върху ${selectedIds.length} задачи`, 'success');
                closeBulkModal();
                
                // Clear selections
                document.querySelectorAll('.assignment-checkbox:checked').forEach(cb => cb.checked = false);
                document.getElementById('select-all').checked = false;
                updateBulkActionsButton();
            }
        );
    }
    
    // Enhanced confirmation modal system
    function showConfirmModal(title, message, onConfirm) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
        modal.innerHTML = `
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3 text-center">
                    <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100">
                        <i class="fas fa-question-circle text-blue-600 text-xl"></i>
                    </div>
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">${title}</h3>
                    <div class="mt-2 px-7 py-3">
                        <p class="text-sm text-gray-500">${message}</p>
                    </div>
                    <div class="items-center px-4 py-3 flex space-x-3">
                        <button id="confirm-yes" class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md flex-1 shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
                            Да
                        </button>
                        <button id="confirm-no" class="px-4 py-2 bg-gray-300 text-gray-700 text-base font-medium rounded-md flex-1 shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300">
                            Не
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Event listeners
        modal.querySelector('#confirm-yes').addEventListener('click', () => {
            modal.remove();
            onConfirm();
        });
        
        modal.querySelector('#confirm-no').addEventListener('click', () => {
            modal.remove();
        });
        
        // Close modal when clicking outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }
    
    // Enhanced notification system
            function showNotification(message, type = 'info', duration = 5000) {
                const notification = document.createElement('div');
                const iconClass = type === 'success' ? 'fas fa-check-circle text-green-600' :
                                type === 'error' ? 'fas fa-exclamation-triangle text-red-600' :
                                type === 'warning' ? 'fas fa-exclamation-triangle text-yellow-600' :
                                'fas fa-info-circle text-blue-600';
                
                const bgClass = type === 'success' ? 'bg-green-50 border-green-200 text-green-800' :
                               type === 'error' ? 'bg-red-50 border-red-200 text-red-800' :
                               type === 'warning' ? 'bg-yellow-50 border-yellow-200 text-yellow-800' :
                               'bg-blue-50 border-blue-200 text-blue-800';
                
                notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 border ${bgClass} max-w-sm`;
                notification.innerHTML = `
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <i class="${iconClass} mr-3 text-lg"></i>
                            <span class="font-medium">${message}</span>
                        </div>
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 opacity-70 hover:opacity-100 transition-opacity">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                document.body.appendChild(notification);
                
                // Auto-remove after duration
                if (duration > 0) {
                    setTimeout(() => {
                        if (notification.parentElement) {
                            notification.remove();
                        }
                    }, duration);
                }
            }
</script> 