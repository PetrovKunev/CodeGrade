@model CodeGrade.ViewModels.SubmissionViewModel
@{
    ViewData["Title"] = "–ü–æ–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ";
}

<div class="bg-white shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-bold text-gray-900">–ü–æ–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ</h2>
                @if (Model.Assignment != null)
                {
                    <p class="text-lg text-gray-600 mt-1">@Model.Assignment.Title</p>
                    <p class="text-sm text-indigo-700 font-semibold mt-1">
                        @GetLanguageDisplay(Model.Assignment.Language)
                    </p>
                    <p class="text-gray-600 mt-1">@Model.Assignment.SubjectModule?.Name</p>
                }
            </div>
            <div class="flex items-center space-x-4">
                <div class="text-right">
                    <div class="text-sm text-gray-600">–ö—Ä–∞–µ–Ω —Å—Ä–æ–∫:</div>
                    @if (Model.Assignment != null)
                    {
                        <div class="font-medium @(Model.Assignment.DueDate > DateTime.UtcNow ? "text-green-600" : "text-red-600")">
                            @Model.Assignment.DueDate.ToString("dd.MM.yyyy HH:mm")
                        </div>
                    }
                    <div class="text-xs text-gray-500">@ViewBag.TimeRemaining</div>
                </div>
                <a href="/Assignments/Details/@Model.AssignmentId" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>–ù–∞–∑–∞–¥
                </a>
            </div>
        </div>

        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6 shadow-sm">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <i class="fas fa-check-circle text-green-600 mr-3 text-lg"></i>
                        <span class="text-green-800 font-medium">@TempData["SuccessMessage"]</span>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="text-green-600 hover:text-green-800">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        }
        
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 shadow-sm">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <i class="fas fa-exclamation-triangle text-red-600 mr-3 text-lg"></i>
                        <span class="text-red-800 font-medium">@TempData["ErrorMessage"]</span>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="text-red-600 hover:text-red-800">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        }

        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ –æ—Å—Ç–∞–≤–∞—â–∏ —Ä–µ—à–µ–Ω–∏—è -->
        @if (ViewBag.SubmissionsCount < ViewBag.MaxSubmissions)
        {
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <div class="flex items-center">
                    <i class="fas fa-info-circle text-blue-600 mr-2"></i>
                    <div>
                        <p class="text-sm font-medium text-blue-900">
                            –û—Å—Ç–∞–≤–∞—Ç @ViewBag.RemainingSubmissions —Ä–µ—à–µ–Ω–∏—è –æ—Ç @ViewBag.MaxSubmissions
                        </p>
                        <p class="text-xs text-blue-700">
                            üí° –°–∏—Å—Ç–µ–º–∞—Ç–∞ —â–µ –∑–∞–ø–∞–∑–∏ –Ω–∞–π-–¥–æ–±—Ä–∏—è –≤–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç
                        </p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                <div class="flex items-center">
                    <i class="fas fa-exclamation-triangle text-yellow-600 mr-2"></i>
                    <div>
                        <p class="text-sm font-medium text-yellow-900">
                            –î–æ—Å—Ç–∏–≥–Ω–∞—Ç –µ –ª–∏–º–∏—Ç—ä—Ç –æ—Ç @ViewBag.MaxSubmissions —Ä–µ—à–µ–Ω–∏—è
                        </p>
                        <p class="text-xs text-yellow-700">
                            üìã –ú–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–µ–≥–ª–µ–¥–∞—Ç–µ –≤—Å–∏—á–∫–∏ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏—è—Ç–∞ "–ú–æ–∏—Ç–µ —Ä–µ—à–µ–Ω–∏—è"
                        </p>
                    </div>
                </div>
            </div>
        }

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Main Content -->
            <div class="lg:col-span-2 space-y-6">
                <!-- Assignment Info -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∑–∞–¥–∞—á–∞—Ç–∞</h3>
                    <div class="grid grid-cols-2 gap-4 text-sm">
                        @if (Model.Assignment != null)
                        {
                            <div>
                                <span class="font-medium text-gray-700">–ú–∞–∫—Å–∏–º–∞–ª–Ω–∏ —Ç–æ—á–∫–∏:</span>
                                <span class="text-gray-600">@Model.Assignment.MaxPoints</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">–í—Ä–µ–º–µ–≤–∏ –ª–∏–º–∏—Ç:</span>
                                <span class="text-gray-600">@Model.Assignment.TimeLimit —Å–µ–∫</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">–õ–∏–º–∏—Ç –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞:</span>
                                <span class="text-gray-600">@Model.Assignment.MemoryLimit MB</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">–ü—É–±–ª–∏—á–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ:</span>
                                <span class="text-gray-600">@(ViewBag.PublicTestCases?.Count ?? 0)</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">–ö–ª–∞—Å:</span>
                                <span class="text-gray-600">@(Model.Assignment.ClassGroup?.Name ?? "-")</span>
                            </div>
                            <div>
                                <span class="font-medium text-gray-700">–ï–∑–∏–∫:</span>
                                <span class="text-gray-600">@GetLanguageDisplay(Model.Assignment.Language)</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Problem Statement -->
                @if (Model.Assignment != null)
                {
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">–£—Å–ª–æ–≤–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞</h3>
                        <div class="bg-gray-50 rounded-lg p-4">
                            <pre class="whitespace-pre-wrap text-gray-700">@Model.Assignment.ProblemStatement</pre>
                        </div>
                    </div>
                }

                <!-- Public Test Cases -->
                @if (ViewBag.PublicTestCases != null && ViewBag.PublicTestCases.Count > 0)
                {
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">–ü—Ä–∏–º–µ—Ä–Ω–∏ —Ç–µ—Å—Ç–æ–≤–∏ —Å–ª—É—á–∞–∏</h3>
                        <div class="space-y-4">
                            @{
                                var orderedTestCases = (List<CodeGrade.Models.TestCase>)ViewBag.PublicTestCases;
                            }
                            @for (int i = 0; i < orderedTestCases.Count; i++)
                            {
                                var testCase = orderedTestCases[i];
                                <div class="border border-gray-200 rounded-lg p-4 bg-white">
                                    <div class="flex justify-between items-center mb-3">
                                        <h4 class="font-medium text-gray-900">
                                            –¢–µ—Å—Ç @(i + 1)
                                            <span class="text-sm text-gray-500">(@testCase.Points —Ç–æ—á–∫–∏)</span>
                                        </h4>
                                    </div>
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">–í—Ö–æ–¥:</label>
                                            <pre class="bg-gray-100 rounded p-2 text-sm text-gray-700 overflow-x-auto">@testCase.Input</pre>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">–û—á–∞–∫–≤–∞–Ω –∏–∑—Ö–æ–¥:</label>
                                            <pre class="bg-gray-100 rounded p-2 text-sm text-gray-700 overflow-x-auto">@testCase.ExpectedOutput</pre>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Submission Form -->
                @if (ViewBag.CanSubmit)
                {
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">–ü–æ–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ</h3>
                        <form asp-action="Submit" asp-route-id="@Model.AssignmentId" method="post" class="space-y-4" id="submission-form">
                            <!-- Debug info -->
                            <div style="display: none;">
                                <p>Debug: AssignmentId = @Model.AssignmentId</p>
                                <p>Debug: Form action will be: /Assignments/Submit/@Model.AssignmentId</p>
                            </div>
                            @Html.AntiForgeryToken()
                            <input asp-for="AssignmentId" type="hidden" />
                            <div asp-validation-summary="ModelOnly" class="text-red-600"></div>

                            <div>
                                <label asp-for="Language" class="block text-sm font-medium text-gray-700">–ï–∑–∏–∫ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–Ω–µ</label>
                                <select asp-for="Language" id="language-select" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                    <option value="csharp">C#</option>
                                    <option value="python">Python</option>
                                    <option value="java">Java</option>
                                    <option value="javascript">JavaScript</option>
                                </select>
                                <span asp-validation-for="Language" class="text-red-600 text-sm"></span>
                            </div>

                            <div>
                                <div class="flex justify-between items-center mb-1">
                                    <label asp-for="Code" class="block text-sm font-medium text-gray-700">–ö–æ–¥ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ</label>
                                    <div class="flex space-x-2 text-xs">
                                        <button type="button" id="test-code-btn" class="text-blue-600 hover:text-blue-800">
                                            <i class="fas fa-play mr-1"></i>–¢–µ—Å—Ç–≤–∞–π —Å –ø—Ä–∏–º–µ—Ä–∏—Ç–µ
                                        </button>
                                        <button type="button" id="format-code-btn" class="text-gray-600 hover:text-gray-800">
                                            <i class="fas fa-indent mr-1"></i>–§–æ—Ä–º–∞—Ç–∏—Ä–∞–π
                                        </button>
                                    </div>
                                </div>
                                <textarea asp-for="Code" id="code-editor" rows="15" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm font-mono" placeholder="–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∫–æ–¥ —Ç—É–∫..." spellcheck="false"></textarea>
                                <span asp-validation-for="Code" class="text-red-600 text-sm"></span>
                                <div class="flex justify-between items-center mt-1 text-xs text-gray-500">
                                    <span id="char-count">0 —Å–∏–º–≤–æ–ª–∞</span>
                                    <span id="line-count">1 —Ä–µ–¥</span>
                                </div>
                            </div>

                            <!-- Test Results Area -->
                            <div id="test-results-area" class="hidden">
                                <h4 class="text-sm font-medium text-gray-900 mb-2">–†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç —Ç–µ—Å—Ç–≤–∞–Ω–µ:</h4>
                                <div id="test-results-content" class="bg-gray-50 border rounded p-3">
                                    <!-- Test results will be populated here -->
                                </div>
                            </div>

                            <!-- Submission Status -->
                            <div id="submission-status" class="hidden">
                                <div class="bg-blue-50 border border-blue-200 rounded p-3">
                                    <div class="flex items-center">
                                        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                                        <span class="text-blue-800">–û–±—Ä–∞–±–æ—Ç–≤–∞ —Å–µ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ...</span>
                                    </div>
                                </div>
                            </div>

                            <div class="flex justify-between items-center">
                                <div class="text-sm text-gray-500">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    @if (Model.Assignment != null)
                                    {
                                        <span>–ú–∞–∫—Å–∏–º–∞–ª–Ω–æ –≤—Ä–µ–º–µ: @Model.Assignment.TimeLimit —Å–µ–∫ | –ü–∞–º–µ—Ç: @Model.Assignment.MemoryLimit MB</span>
                                    }
                                </div>
                                <button type="submit" id="submit-btn" class="bg-indigo-600 text-white px-6 py-2 rounded-md hover:bg-indigo-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                    <i class="fas fa-paper-plane mr-2"></i>–ü–æ–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ
                                </button>
                            </div>
                        </form>
                    </div>
                }
                else
                {
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                        <div class="flex items-center">
                            <i class="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                            <span class="text-red-800">–°—Ä–æ–∫—ä—Ç –∑–∞ –ø–æ–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è –µ –∏–∑—Ç–µ–∫—ä–ª.</span>
                        </div>
                    </div>
                }
            </div>

            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- My Submissions -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">–ú–æ–∏—Ç–µ —Ä–µ—à–µ–Ω–∏—è</h3>
                    @if (ViewBag.StudentSubmissions != null && ViewBag.StudentSubmissions.Count > 0)
                    {
                        <div class="space-y-3">
                            @{
                                var studentSubmissions = (List<CodeGrade.Models.Submission>)ViewBag.StudentSubmissions;
                                var gradeLookup = (Dictionary<int, CodeGrade.Models.Grade>)ViewBag.GradeLookup;
                            }
                            @foreach (var submission in studentSubmissions.Take(5))
                            {
                                <div class="bg-white rounded p-3 border">
                                    <div class="flex justify-between items-start mb-2">
                                        <div class="text-sm font-medium text-gray-900">
                                            @submission.SubmittedAt.ToString("dd.MM.yyyy HH:mm")
                                        </div>
                                        <div class="text-xs px-2 py-1 rounded @GetStatusColor(submission.Status)">
                                            @GetStatusDisplay(submission.Status)
                                        </div>
                                    </div>
                                    <div class="text-xs text-gray-600">
                                        @GetLanguageDisplay(submission.Language)
                                    </div>
                                    @if (gradeLookup.ContainsKey(submission.AssignmentId))
                                    {
                                        var grade = gradeLookup[submission.AssignmentId];
                                        <div class="text-xs text-gray-600 mt-1">
                                            @grade.Points —Ç–æ—á–∫–∏ (–û—Ü–µ–Ω–∫–∞: @grade.GradeValue)
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        @if (studentSubmissions.Count > 5)
                        {
                            <div class="text-center mt-3">
                                <a href="/Submissions/MySubmissions" class="text-sm text-indigo-600 hover:text-indigo-800">
                                    –í–∏–∂ –≤—Å–∏—á–∫–∏ —Ä–µ—à–µ–Ω–∏—è
                                </a>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-gray-500 text-sm">–í—Å–µ –æ—â–µ –Ω—è–º–∞—Ç–µ –ø–æ–¥–∞–¥–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞ —Ç–∞–∑–∏ –∑–∞–¥–∞—á–∞.</p>
                    }
                </div>

                <!-- Tips -->
                <div class="bg-blue-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">–°—ä–≤–µ—Ç–∏</h3>
                    <ul class="text-sm text-gray-700 space-y-2">
                        <li class="flex items-start">
                            <i class="fas fa-lightbulb text-yellow-500 mr-2 mt-0.5"></i>
                            <span>üí° –í–∏–Ω–∞–≥–∏ —Ç–µ—Å—Ç–≤–∞–π—Ç–µ –∫–æ–¥–∞ —Å–∏ —Å –ø—Ä–∏–º–µ—Ä–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–µ –ø—Ä–µ–¥–∏ –¥–∞ –≥–æ –ø–æ–¥–∞–¥–µ—Ç–µ</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-clock text-blue-500 mr-2 mt-0.5"></i>
                            <span>‚è±Ô∏è –°–ª–µ–¥–≤–∞–π—Ç–µ –≤—Ä–µ–º–µ–≤–∏—è –ª–∏–º–∏—Ç –∑–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-memory text-green-500 mr-2 mt-0.5"></i>
                            <span>üíæ –í–Ω–∏–º–∞–≤–∞–π—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-green-500 mr-2 mt-0.5"></i>
                            <span>‚úÖ –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –∏–∑—Ö–æ–¥—ä—Ç —Å—ä–≤–ø–∞–¥–∞ —Ç–æ—á–Ω–æ —Å –æ—á–∞–∫–≤–∞–Ω–∏—è</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for limit reached message -->
<div id="limitModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                <i class="fas fa-exclamation-triangle text-yellow-600 text-xl"></i>
            </div>
            <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">–î–æ—Å—Ç–∏–≥–Ω–∞—Ç –ª–∏–º–∏—Ç</h3>
            <div class="mt-2 px-7 py-3">
                <p class="text-sm text-gray-500">
                    –î–æ—Å—Ç–∏–≥–Ω–∞—Ç –µ –ª–∏–º–∏—Ç—ä—Ç –æ—Ç 3 —Ä–µ—à–µ–Ω–∏—è –∑–∞ —Ç–∞–∑–∏ –∑–∞–¥–∞—á–∞. –ú–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–µ–≥–ª–µ–¥–∞—Ç–µ –≤—Å–∏—á–∫–∏ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏—è—Ç–∞ "–ú–æ–∏—Ç–µ —Ä–µ—à–µ–Ω–∏—è" –∏–ª–∏ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ—Ç–µ —Å —É—á–∏—Ç–µ–ª—è –∑–∞ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –æ–ø–∏—Ç–∏.
                </p>
            </div>
            <div class="items-center px-4 py-3">
                <button id="closeLimitModal" class="px-4 py-2 bg-indigo-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-300">
                    –†–∞–∑–±—Ä–∞—Ö
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const codeEditor = document.getElementById('code-editor');
            const charCount = document.getElementById('char-count');
            const lineCount = document.getElementById('line-count');
            const testCodeBtn = document.getElementById('test-code-btn');
            const formatCodeBtn = document.getElementById('format-code-btn');
            const testResultsArea = document.getElementById('test-results-area');
            const testResultsContent = document.getElementById('test-results-content');
            const submitBtn = document.getElementById('submit-btn');
            const submissionStatus = document.getElementById('submission-status');
            const limitModal = document.getElementById('limitModal');
            const closeLimitModal = document.getElementById('closeLimitModal');

            // Modal functionality
            if (closeLimitModal) {
                closeLimitModal.addEventListener('click', function() {
                    limitModal.classList.add('hidden');
                });
            }

            // Close modal when clicking outside
            if (limitModal) {
                limitModal.addEventListener('click', function(e) {
                    if (e.target === limitModal) {
                        limitModal.classList.add('hidden');
                    }
                });
            }

            // Show limit modal if limit is reached
            @if (!ViewBag.CanSubmit && ViewBag.SubmissionsCount >= ViewBag.MaxSubmissions)
            {
                <text>
                document.addEventListener('DOMContentLoaded', function() {
                    setTimeout(() => {
                        limitModal.classList.remove('hidden');
                    }, 500);
                });
                </text>
            }

            // Update character and line count
            function updateCounts() {
                const text = codeEditor.value;
                const chars = text.length;
                const lines = text.split('\n').length;
                charCount.textContent = chars + ' —Å–∏–º–≤–æ–ª–∞';
                lineCount.textContent = lines + ' —Ä–µ–¥' + (lines !== 1 ? '–∞' : '');
            }

            if (codeEditor) {
                codeEditor.addEventListener('input', updateCounts);
                codeEditor.addEventListener('keydown', function(e) {
                    // Auto-indent on Enter
                    if (e.key === 'Enter') {
                        const cursorPos = this.selectionStart;
                        const textBeforeCursor = this.value.substring(0, cursorPos);
                        const lastLine = textBeforeCursor.split('\n').pop();
                        const indentMatch = lastLine.match(/^\s*/);
                        const indent = indentMatch ? indentMatch[0] : '';
                        
                        // Add extra indent for certain characters
                        if (lastLine.trim().endsWith('{') || lastLine.trim().endsWith(':')) {
                            setTimeout(() => {
                                const newCursorPos = this.selectionStart;
                                const spaces = '    '; // 4 spaces
                                this.value = this.value.substring(0, newCursorPos) + indent + spaces + this.value.substring(newCursorPos);
                                this.selectionStart = this.selectionEnd = newCursorPos + indent.length + spaces.length;
                                updateCounts();
                            }, 0);
                        } else {
                            setTimeout(() => {
                                const newCursorPos = this.selectionStart;
                                this.value = this.value.substring(0, newCursorPos) + indent + this.value.substring(newCursorPos);
                                this.selectionStart = this.selectionEnd = newCursorPos + indent.length;
                                updateCounts();
                            }, 0);
                        }
                    }
                    
                    // Tab support
                    if (e.key === 'Tab') {
                        e.preventDefault();
                        const start = this.selectionStart;
                        const end = this.selectionEnd;
                        this.value = this.value.substring(0, start) + '    ' + this.value.substring(end);
                        this.selectionStart = this.selectionEnd = start + 4;
                        updateCounts();
                    }
                });
                
                // Auto-save functionality
                let autoSaveTimeout;
                codeEditor.addEventListener('input', function() {
                    clearTimeout(autoSaveTimeout);
                    autoSaveTimeout = setTimeout(() => {
                        const formData = {
                            assignmentId: @Model.AssignmentId,
                            code: this.value,
                            language: document.getElementById('language-select').value
                        };
                        localStorage.setItem('draft-assignment-@Model.AssignmentId', JSON.stringify(formData));
                    }, 2000);
                });
                
                // Load draft on page load
                const draftKey = 'draft-assignment-@Model.AssignmentId';
                const savedDraft = localStorage.getItem(draftKey);
                
                if (savedDraft) {
                    try {
                        const draft = JSON.parse(savedDraft);
                        if (draft.code && !codeEditor.value) {
                            codeEditor.value = draft.code;
                            if (draft.language) {
                                document.getElementById('language-select').value = draft.language;
                            }
                            showNotification('–ó–∞—Ä–µ–¥–µ–Ω–∞ –µ –∑–∞–ø–∞–∑–µ–Ω–∞ —á–µ—Ä–Ω–æ–≤–∞', 'info', 3000);
                        }
                    } catch (e) {
                        console.error('Error loading draft:', e);
                    }
                }
                
                updateCounts();
            }

            // Test code functionality
            if (testCodeBtn) {
                testCodeBtn.addEventListener('click', async function() {
                    const code = codeEditor.value.trim();
                    const language = document.getElementById('language-select').value;

                    if (!code) {
                        showNotification('–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –∫–æ–¥ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ.', 'error');
                        return;
                    }

                    testCodeBtn.disabled = true;
                    testCodeBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>–¢–µ—Å—Ç–≤–∞ —Å–µ...';
                    testResultsArea.classList.remove('hidden');
                    testResultsContent.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> –¢–µ—Å—Ç–≤–∞ —Å–µ...</div>';

                    try {
                        const response = await fetch('/Assignments/TestCode', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                assignmentId: @Model.AssignmentId,
                                code: code,
                                language: language
                            })
                        });

                        const result = await response.json();
                        if (result.success) {
                            let resultsHtml = '';
                            result.results.forEach(function(result, index) {
                                const statusClass = result.success ? 'text-green-600' : 'text-red-600';
                                const statusIcon = result.success ? 'fa-check' : 'fa-times';
                                
                                resultsHtml += `
                                    <div class="border-b border-gray-200 pb-3 mb-3 ${index === result.results.length - 1 ? 'border-b-0 pb-0 mb-0' : ''}">
                                        <div class="flex items-center justify-between mb-2">
                                            <span class="font-medium">–¢–µ—Å—Ç ${index + 1}</span>
                                            <span class="${statusClass}">
                                                <i class="fas ${statusIcon} mr-1"></i>
                                                ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–ì—Ä–µ—à–∫–∞'}
                                            </span>
                                        </div>
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-2 text-xs">
                                            <div>
                                                <span class="font-medium">–í—Ö–æ–¥:</span>
                                                <pre class="bg-gray-100 p-1 rounded mt-1">${result.input || '(–ø—Ä–∞–∑–Ω–æ)'}</pre>
                                            </div>
                                            <div>
                                                <span class="font-medium">–û—á–∞–∫–≤–∞–Ω –∏–∑—Ö–æ–¥:</span>
                                                <pre class="bg-gray-100 p-1 rounded mt-1">${result.expectedOutput || '(–ø—Ä–∞–∑–Ω–æ)'}</pre>
                                            </div>
                                            <div>
                                                <span class="font-medium">–í–∞—à –∏–∑—Ö–æ–¥:</span>
                                                <pre class="bg-gray-100 p-1 rounded mt-1">${result.actualOutput || '(–ø—Ä–∞–∑–Ω–æ)'}</pre>
                                            </div>
                                        </div>
                                        ${result.errorMessage ? `<div class="text-red-600 text-xs mt-1">–ì—Ä–µ—à–∫–∞: ${result.errorMessage}</div>` : ''}
                                        <div class="text-gray-500 text-xs mt-1">
                                            –í—Ä–µ–º–µ: ${result.executionTime}ms | –°—Ç–∞—Ç—É—Å: ${result.status}
                                        </div>
                                    </div>
                                `;
                            });
                            testResultsContent.innerHTML = resultsHtml;
                        } else {
                            testResultsContent.innerHTML = `<div class="text-red-600">${result.error}</div>`;
                        }
                    } catch (error) {
                        testResultsContent.innerHTML = '<div class="text-red-600">–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ –Ω–∞ –∫–æ–¥–∞.</div>';
                    } finally {
                        testCodeBtn.disabled = false;
                        testCodeBtn.innerHTML = '<i class="fas fa-play mr-1"></i>–¢–µ—Å—Ç–≤–∞–π —Å –ø—Ä–∏–º–µ—Ä–∏—Ç–µ';
                    }
                });
            }

            // Format code functionality
            if (formatCodeBtn) {
                formatCodeBtn.addEventListener('click', function() {
                    const language = document.getElementById('language-select').value;
                    const code = codeEditor.value;
                    
                    // Basic formatting (in a real app, use proper formatters)
                    let formatted = code
                        .split('\n')
                        .map(line => line.trim())
                        .join('\n')
                        .replace(/\{/g, ' {\n')
                        .replace(/\}/g, '\n}')
                        .replace(/;/g, ';\n')
                        .split('\n')
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                        .join('\n');
                    
                    codeEditor.value = formatted;
                    updateCounts();
                    showNotification('–ö–æ–¥—ä—Ç –µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω', 'info');
                });
            }

            // Form submission
            const submissionForm = document.getElementById('submission-form');
            if (submissionForm) {
                submissionForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const code = codeEditor.value.trim();
                    if (!code) {
                        showNotification('–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–¥ –∑–∞ –ø–æ–¥–∞–≤–∞–Ω–µ', 'error');
                        return;
                    }
                    
                    if (code.length > 50000) {
                        showNotification('–ö–æ–¥—ä—Ç –µ —Ç–≤—ä—Ä–¥–µ –¥—ä–ª—ä–≥ (–º–∞–∫—Å–∏–º—É–º 50,000 —Å–∏–º–≤–æ–ª–∞)', 'error');
                        return;
                    }
                    
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–ü–æ–¥–∞–≤–∞ —Å–µ...';
                    submissionStatus.classList.remove('hidden');
                    
                    // Create FormData and submit via AJAX
                    const formData = new FormData(this);
                    
                    // Ensure AssignmentId is properly set
                    if (!formData.get('AssignmentId')) {
                        formData.set('AssignmentId', @Model.AssignmentId);
                    }
                    
                    try {
                        const response = await fetch(this.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            showNotification(result.message, 'success');
                            // Clear draft after successful submission
                            localStorage.removeItem('draft-assignment-@Model.AssignmentId');
                            // Reload page to show updated submissions
                            setTimeout(() => {
                                location.reload();
                            }, 2000);
                        } else {
                            if (result.showModal) {
                                limitModal.classList.remove('hidden');
                            } else {
                                showNotification(result.message, 'error');
                            }
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>–ü–æ–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ';
                            submissionStatus.classList.add('hidden');
                        }
                    } catch (error) {
                        console.error('Submission error:', error);
                        showNotification('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.', 'error');
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>–ü–æ–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ';
                        submissionStatus.classList.add('hidden');
                    }
                });
            }
            
            // Enhanced notification system
            function showNotification(message, type = 'info', duration = 5000) {
                const notification = document.createElement('div');
                const iconClass = type === 'success' ? 'fas fa-check-circle text-green-600' :
                                type === 'error' ? 'fas fa-exclamation-triangle text-red-600' :
                                type === 'warning' ? 'fas fa-exclamation-triangle text-yellow-600' :
                                'fas fa-info-circle text-blue-600';
                
                const bgClass = type === 'success' ? 'bg-green-50 border-green-200 text-green-800' :
                               type === 'error' ? 'bg-red-50 border-red-200 text-red-800' :
                               type === 'warning' ? 'bg-yellow-50 border-yellow-200 text-yellow-800' :
                               'bg-blue-50 border-blue-200 text-blue-800';
                
                notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 border ${bgClass} max-w-sm`;
                notification.innerHTML = `
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <i class="${iconClass} mr-3 text-lg"></i>
                            <span class="font-medium">${message}</span>
                        </div>
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 opacity-70 hover:opacity-100 transition-opacity">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                document.body.appendChild(notification);
                
                // Auto-remove after duration
                if (duration > 0) {
                    setTimeout(() => {
                        if (notification.parentElement) {
                            notification.remove();
                        }
                    }, duration);
                }
            }
        });
    </script>
}

@functions {
    public string GetLanguageDisplay(string language)
    {
        return language switch
        {
            "csharp" => "C#",
            "python" => "Python",
            "java" => "Java",
            "javascript" => "JavaScript",
            _ => language
        };
    }

    public string GetStatusDisplay(SubmissionStatus status)
    {
        return status switch
        {
            SubmissionStatus.Pending => "–ß–∞–∫–∞",
            SubmissionStatus.Running => "–ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ",
            SubmissionStatus.Completed => "–ó–∞–≤—ä—Ä—à–µ–Ω–æ",
            SubmissionStatus.CompilationError => "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª–∞—Ü–∏—è",
            SubmissionStatus.RuntimeError => "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ",
            SubmissionStatus.TimeLimitExceeded => "–ü—Ä–µ–≤–∏—à–µ–Ω –≤—Ä–µ–º–µ–≤–∏ –ª–∏–º–∏—Ç",
            SubmissionStatus.MemoryLimitExceeded => "–ü—Ä–µ–≤–∏—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞",
            _ => status.ToString()
        };
    }

    public string GetStatusColor(SubmissionStatus status)
    {
        return status switch
        {
            SubmissionStatus.Pending => "bg-yellow-100 text-yellow-800",
            SubmissionStatus.Running => "bg-blue-100 text-blue-800",
            SubmissionStatus.Completed => "bg-green-100 text-green-800",
            SubmissionStatus.CompilationError => "bg-red-100 text-red-800",
            SubmissionStatus.RuntimeError => "bg-red-100 text-red-800",
            SubmissionStatus.TimeLimitExceeded => "bg-orange-100 text-orange-800",
            SubmissionStatus.MemoryLimitExceeded => "bg-orange-100 text-orange-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
} 