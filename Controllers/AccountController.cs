using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Identity;
using CodeGrade.ViewModels;
using CodeGrade.Models;
using CodeGrade.Data;
using Microsoft.EntityFrameworkCore;
using CodeGrade.Services;

namespace CodeGrade.Controllers
{
    public class AccountController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly ApplicationDbContext _context;
        private readonly IEmailService _emailService;
        private readonly ILogger<AccountController> _logger;

        public AccountController(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            ApplicationDbContext context,
            IEmailService emailService,
            ILogger<AccountController> logger)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _context = context;
            _emailService = emailService;
            _logger = logger;
        }

        [HttpGet]
        public IActionResult Login(string? returnUrl = null)
        {
            ViewData["ReturnUrl"] = returnUrl;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(LoginViewModel model, string? returnUrl = null)
        {
            ViewData["ReturnUrl"] = returnUrl;
            
            if (ModelState.IsValid)
            {
                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);
                
                if (result.Succeeded)
                {
                    var user = await _userManager.FindByEmailAsync(model.Email);
                    if (user != null)
                    {
                        // Redirect based on user role
                        if (await _userManager.IsInRoleAsync(user, "Admin"))
                        {
                            return RedirectToAction("AdminDashboard", "Home");
                        }
                        else if (await _userManager.IsInRoleAsync(user, "Teacher"))
                        {
                            return RedirectToAction("TeacherDashboard", "Home");
                        }
                        else
                        {
                            return RedirectToAction("StudentDashboard", "Home");
                        }
                    }
                    
                    return RedirectToLocal(returnUrl);
                }
                
                if (result.IsLockedOut)
                {
                    ModelState.AddModelError(string.Empty, "–ê–∫–∞—É–Ω—Ç—ä—Ç –µ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–ª—é—á–µ–Ω. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ.");
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∏–ª–∏ –ø–∞—Ä–æ–ª–∞.");
                }
            }

            return View(model);
        }

        [HttpGet]
        public IActionResult Register()
        {
            // –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–ª–∞—Å–æ–≤–µ—Ç–µ –∑–∞ dropdown
            var classGroups = _context.ClassGroups.ToList();
            ViewBag.ClassGroups = classGroups;
            return View(new RegisterViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Register(RegisterViewModel model)
        {
            // –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–ª–∞—Å–æ–≤–µ—Ç–µ –∑–∞ dropdown –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            var classGroups = _context.ClassGroups.ToList();
            ViewBag.ClassGroups = classGroups;

            // Debug: Log model data
            System.Diagnostics.Debug.WriteLine($"Role: {model.Role}");
            System.Diagnostics.Debug.WriteLine($"ClassNumber: {model.ClassNumber}");
            System.Diagnostics.Debug.WriteLine($"ClassGroupId: {model.ClassGroupId}");

            // Debug: Log validation errors
            if (!ModelState.IsValid)
            {
                foreach (var modelState in ModelState.Values)
                {
                    foreach (var error in modelState.Errors)
                    {
                        System.Diagnostics.Debug.WriteLine($"Validation Error: {error.ErrorMessage}");
                    }
                }
                return View(model);
            }

            // Check for duplicate ClassNumber within the same ClassGroup for students
            if (model.Role == "Student" && model.ClassGroupId.HasValue && model.ClassNumber.HasValue)
            {
                var existingStudent = await _context.Students
                    .FirstOrDefaultAsync(s => s.ClassGroupId == model.ClassGroupId && s.ClassNumber == model.ClassNumber);
                
                if (existingStudent != null)
                {
                    ModelState.AddModelError(nameof(model.ClassNumber), 
                        $"–£—á–µ–Ω–∏–∫ —Å –Ω–æ–º–µ—Ä {model.ClassNumber} –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ —Ç–æ–∑–∏ –∫–ª–∞—Å.");
                    return View(model);
                }
            }

            if (ModelState.IsValid)
            {
                System.Diagnostics.Debug.WriteLine("ModelState is valid, proceeding with user creation");
                var user = new ApplicationUser
                {
                    UserName = model.Email,
                    Email = model.Email,
                    FirstName = model.FirstName,
                    LastName = model.LastName,
                    CreatedAt = DateTime.UtcNow,
                    IsActive = true,
                    EmailConfirmed = false // ‚úÖ –ù–æ–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –µ –ø–æ—Ç–≤—ä—Ä–¥–µ–Ω–∞
                };

                var result = await _userManager.CreateAsync(user, model.Password);
                
                System.Diagnostics.Debug.WriteLine($"User creation result: {result.Succeeded}");
                if (result.Succeeded)
                {
                    // Add user to selected role
                    await _userManager.AddToRoleAsync(user, model.Role);
                    
                    if (model.Role == "Student")
                    {
                        // Create Student record
                        var student = new Student
                        {
                            UserId = user.Id,
                            StudentNumber = model.ClassNumber.HasValue ? model.ClassNumber.Value.ToString() : string.Empty,
                            ClassGroupId = model.ClassGroupId,
                            SubGroup = model.SubGroup,
                            ClassNumber = model.ClassNumber ?? 0
                        };
                        _context.Students.Add(student);
                    }
                    else if (model.Role == "Teacher")
                    {
                        // Create Teacher record
                        var teacher = new Teacher
                        {
                            UserId = user.Id,
                            Department = "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                            Title = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª"
                        };
                        
                        _context.Teachers.Add(teacher);
                    }
                    
                    await _context.SaveChangesAsync();
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ email –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω
                    var token = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    var confirmationLink = Url.Action("ConfirmEmail", "Account", 
                        new { userId = user.Id, token = token }, Request.Scheme, Request.Host.Value);
                    
                    try
                    {
                        // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ email –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
                        if (!string.IsNullOrEmpty(user.Email) && !string.IsNullOrEmpty(confirmationLink))
                        {
                            await _emailService.SendEmailConfirmationAsync(user.Email, confirmationLink);
                        }
                        
                        TempData["InfoMessage"] = "üìß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞! –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤–∞—à–∏—è –∏–º–µ–π–ª –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞.";
                        return RedirectToAction("Login");
                    }
                    catch (Exception ex)
                    {
                        // –ê–∫–æ email –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑–ø—Ä–∞—Ç–∏, –≤—Å–µ –ø–∞–∫ —Å—ä–∑–¥–∞–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
                        // –Ω–æ –≥–æ –º–∞—Ä–∫–∏—Ä–∞–º–µ –∫–∞—Ç–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–æ–∫–∞—Ç–æ –ø–æ—Ç–≤—ä—Ä–¥–∏ –∏–º–µ–π–ª–∞
                        _logger.LogError(ex, "Failed to send confirmation email to {Email}", user.Email);
                        
                        TempData["WarningMessage"] = "‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞, –Ω–æ –Ω–µ –º–æ–∂–∞—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º email –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ. –ú–æ–ª—è, —Å–≤—ä—Ä–∂–µ—Ç–µ —Å–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.";
                        return RedirectToAction("Login");
                    }
                }
                
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            return View(model);
        }

        [HttpGet]
        public async Task<IActionResult> Logout()
        {
            await _signInManager.SignOutAsync();
            return View();
        }

        [HttpGet]
        public IActionResult AccessDenied()
        {
            return View();
        }

        [HttpGet]
        public async Task<IActionResult> ConfirmEmail(string userId, string token)
        {
            if (userId == null || token == null)
            {
                return RedirectToAction("Index", "Home");
            }
            
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                TempData["ErrorMessage"] = "‚ùå –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.";
                return RedirectToAction("Login");
            }
            
            var result = await _userManager.ConfirmEmailAsync(user, token);
            if (result.Succeeded)
            {
                // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª–µ–Ω –∏–º–µ–π–ª
                try
                {
                    if (!string.IsNullOrEmpty(user.Email) && !string.IsNullOrEmpty(user.FirstName))
                    {
                        await _emailService.SendWelcomeEmailAsync(user.Email, user.FirstName);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to send welcome email to {Email}", user.Email);
                }
                
                TempData["SuccessMessage"] = "‚úÖ –ò–º–µ–π–ª—ä—Ç –µ –ø–æ—Ç–≤—ä—Ä–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–µ–≥–∞ –º–æ–∂–µ—Ç–µ –¥–∞ –≤–ª–µ–∑–µ—Ç–µ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞.";
                return RedirectToAction("Login");
            }
            else
            {
                TempData["ErrorMessage"] = "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∞.";
                return RedirectToAction("Login");
            }
        }

        [HttpGet]
        public async Task<IActionResult> ResendConfirmationEmail(string email)
        {
            if (string.IsNullOrEmpty(email))
            {
                return RedirectToAction("Login");
            }
            
            var user = await _userManager.FindByEmailAsync(email);
            if (user == null)
            {
                // –ù–µ –ø–æ–∫–∞–∑–≤–∞–º–µ –≥—Ä–µ—à–∫–∞ –∑–∞ –¥–∞ –Ω–µ —Ä–∞–∑–∫—Ä–∏–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ –∏–º–µ–π–ª–∏
                TempData["InfoMessage"] = "üìß –ê–∫–æ –∏–º–µ–π–ª—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞, —â–µ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏–Ω–∫ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ.";
                return RedirectToAction("Login");
            }
            
            if (user.EmailConfirmed)
            {
                TempData["InfoMessage"] = "‚ÑπÔ∏è –í–∞—à–∏—è—Ç –∏–º–µ–π–ª –≤–µ—á–µ –µ –ø–æ—Ç–≤—ä—Ä–¥–µ–Ω.";
                return RedirectToAction("Login");
            }
            
            var token = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            var confirmationLink = Url.Action("ConfirmEmail", "Account", 
                new { userId = user.Id, token = token }, Request.Scheme, Request.Host.Value);
            
            try
            {
                if (!string.IsNullOrEmpty(user.Email) && !string.IsNullOrEmpty(confirmationLink))
                {
                    await _emailService.SendEmailConfirmationAsync(user.Email, confirmationLink);
                }
                TempData["SuccessMessage"] = "üìß Email –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω –æ—Ç–Ω–æ–≤–æ.";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to resend confirmation email to {Email}", user.Email);
                TempData["ErrorMessage"] = "‚ùå –ù–µ –º–æ–∂–∞—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º email –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ.";
            }
            
            return RedirectToAction("Login");
        }

        private IActionResult RedirectToLocal(string? returnUrl)
        {
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }
    }
} 